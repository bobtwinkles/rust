warning: not reporting region error due to -Znll
  --> $DIR/return-wrong-bound-region.rs:21:23
   |
LL |     expect_sig(|a, b| b); // ought to return `a`
   |                       ^

error[E0999]: The region for the argument `b` does not outlive the region for the argument `a`. Required due to this expression:
  --> $DIR/return-wrong-bound-region.rs:21:23
   |
LL |     expect_sig(|a, b| b); // ought to return `a`
   |                       ^
   |
note: the too-short region is created here
  --> $DIR/return-wrong-bound-region.rs:21:20
   |
LL |     expect_sig(|a, b| b); // ought to return `a`
   |                    ^
note: the region to be outlived is created here
  --> $DIR/return-wrong-bound-region.rs:21:17
   |
LL |     expect_sig(|a, b| b); // ought to return `a`
   |                 ^

note: No external requirements
  --> $DIR/return-wrong-bound-region.rs:21:16
   |
LL |     expect_sig(|a, b| b); // ought to return `a`
   |                ^^^^^^^^
   |
   = note: defining type: DefId(0/1:9 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [
               i16,
               for<'r, 's> extern "rust-call" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32
           ]

note: No external requirements
  --> $DIR/return-wrong-bound-region.rs:20:1
   |
LL | / fn test() {
LL | |     expect_sig(|a, b| b); // ought to return `a`
LL | |     //~^ WARN not reporting region error due to -Znll
LL | |     //~| ERROR does not outlive the region
LL | | }
   | |_^
   |
   = note: defining type: DefId(0/0:3 ~ return_wrong_bound_region[317d]::test[0]) with substs []

error: aborting due to previous error

For more information about this error, try `rustc --explain E0999`.
